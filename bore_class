#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 17 17:21:12 2022

@author: johnsalvaris
"""
# bore class

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler # min-max to 0-1
from sklearn.preprocessing import StandardScaler # z-score

from sklearn.model_selection import train_test_split

from torch import Tensor
from torch.autograd import Variable


class bore():
    def __init__(self, bore_id):
        self.id = bore_id
    
    def add_location(self, bore_df, silo_df):
        self.bore_latitude = bore_df['Latitude'][0]
        self.bore_longitude = bore_df['Longitude'][0]
        
        self.silo_latitude = silo_df['latitude'].to_numpy()[0]
        self.silo_longitude = silo_df['longitude'].to_numpy()[0]

    
    def add_gwl_data(self, gwl_df):
        self.gwl_dates = gwl_df['Date'].to_numpy()
        self.swl = gwl_df['Result (m)'].to_numpy()

    def add_silo_data(self, silo_df):
        self.silo_dates = silo_df['YYYY-MM-DD'].to_numpy()
        
        self.daily_rain = silo_df['daily_rain'].to_numpy()
        self.max_temp = silo_df['max_temp'].to_numpy()
        self.min_temp = silo_df['min_temp'].to_numpy()
        self.vp = silo_df['vp'].to_numpy()
        self.vp_deficit = silo_df['vp_deficit'].to_numpy()
        self.evap_pan = silo_df['evap_pan'].to_numpy()
        self.evap_syn = silo_df['evap_syn'].to_numpy()
        self.evap_comb = silo_df['evap_comb'].to_numpy()
        self.evap_morton_lake = silo_df['evap_morton_lake'].to_numpy()
        self.radiation = silo_df['radiation'].to_numpy()
        self.rh_tmax = silo_df['rh_tmax'].to_numpy()
        self.rh_tmin = silo_df['rh_tmin'].to_numpy()
        self.et_short_crop = silo_df['et_short_crop'].to_numpy()
        self.et_tall_crop = silo_df['et_tall_crop'].to_numpy()
        self.et_morton_actual = silo_df['et_morton_actual'].to_numpy()
        self.et_morton_potential = silo_df['et_morton_potential'].to_numpy()
        self.et_morton_wet = silo_df['et_morton_wet'].to_numpy()
        self.mslp = silo_df['mslp'].to_numpy()

""""
INCLUDE THIS???

    def choose_model(self, model='Keras LSTM'):
        # keras LSTM, torch LSTM, sklearn SVR
        self.model_type = model_type
"""


# new class --> Model bore

class model_parameters(bore):
    def __init__(self, silo_variables, use_gwl_as_input=True): # define the input variable names
        #super(model_parameters, self).__init__(bore_id)
        self.input_variables = silo_variables.copy()
        
        if use_gwl_as_input == True:
            self.input_variables.insert(0, 'swl')


    def add_data(self, gwl_df, silo_df):
        if len(self.input_variables) == 0:
            raise Exception("No inputs assigned.")
        
        self.input_data = silo_df.drop(silo_df.columns[~silo_df.columns.isin(self.input_variables)], axis=1)
        self.input_data.reset_index(drop=True, inplace=True)#isolates only variables used

        if 'swl' in self.input_variables:
            swl_df = gwl_df['Result (m)']
            swl_df.reset_index(drop=True, inplace=True)
            self.input_data = pd.concat((swl_df, self.input_data), axis=1)
     
            self.input_data = self.input_data.rename(columns={'Result (m)': 'swl'})

        self.dates = gwl_df['Date']
        self.dates.reset_index(drop=True, inplace=True)
        self.dates = self.dates.rename('date')
        
        self.output_data = gwl_df['Result (m)']
        self.output_data.reset_index(drop=True, inplace=True)
        self.output_data = self.output_data.rename('swl')


    def scale_data(self, scaler_type='mm'):        
        if scaler_type == 'mm':
            self.input_scaler = MinMaxScaler()
            self.output_scaler = MinMaxScaler()
        elif scaler_type == 'ss':
            self.input_scaler = StandardScaler()
            self.output_scaler = StandardScaler()
        else:
            raise Exception("Invalid scaler_type choice. Must be 'mm' or 'ss'")
        
        self.input_scaler = self.input_scaler.fit(self.input_data[self.input_data.columns])
        self.output_scaler = self.output_scaler.fit(self.output_data.values.reshape(-1,1))

        self.scaled_input = pd.DataFrame(self.input_scaler.transform(self.input_data[self.input_data.columns]))
        self.scaled_output = pd.DataFrame(self.output_scaler.transform(self.output_data.values.reshape(-1,1)))


    def add_in_out_params(self, times_in, out_after, times_out=1, between_outs=1):
        if times_out < 1:
            raise Exception("At least one output day required. Change times_out")
        if between_outs < 1:
            raise Exception("Minimum one day between outputs. Change between_outs")
        if out_after < 1:
            raise Exception("Output must be at least one day after final input. Change out_after")
        
        self.times_in = times_in # number of input days
        self.out_after = out_after # time to first predicition e.g. 7 for one week in the future
        self.times_out = times_out # number of output days
        self.between_outs = between_outs # consistent spacing between each output e.g. 7 for weekly

    def format_inputs_outputs(self):        
        entries = self.scaled_input.shape[0] - (self.times_out - 1) * self.between_outs - self.out_after - self.times_in + 1
        
        # format inputs
        input_list = []
        for i in range(entries):
            input_list.append(self.scaled_input.shift(-i, axis=0)[:self.times_in].to_numpy())
        self.formatted_inputs = np.array(input_list)
        
        # format outputs
        output_list = []
        out_index = [i for i in range(0, (self.times_out) * self.between_outs, self.between_outs)]
        for i in range(entries):
            output_list.append(self.scaled_output.shift(-self.out_after - self.times_in + 1 - i, axis=0)[0][out_index])
        self.formatted_outputs = np.array(output_list)

        self.used_dates = self.dates[self.times_in + self.out_after - 1:]
        self.unscaled_output = self.output_data[self.times_in + self.out_after - 1:]
        """
        USED DATES DOES NOT MATCH REAL WHEN times_out >1
        """
        
        
    def divide_data(self, test_size=0.2, shuffle=False):
        self.test_size = test_size
        self.shuffle = shuffle
    
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.formatted_inputs, self.formatted_outputs, test_size=self.test_size, shuffle=self.shuffle)
        self.train_dates, self.test_dates = train_test_split(self.used_dates, test_size=self.test_size, shuffle=self.shuffle)
        self.unscaled_y_train, self.unscaled_y_test = train_test_split(self.unscaled_output, test_size=self.test_size, shuffle=self.shuffle)
        """
        USED DATES DOES NOT MATCH REAL WHEN times_out >1
        """


    def format_for_torch_LSTM(self):
        self.X_train_tensor = Variable(Tensor(self.X_train))
        self.X_test_tensor = Variable(Tensor(self.X_test))
        self.y_train_tensor = Variable(Tensor(self.y_train))
        self.y_test_tensor = Variable(Tensor(self.y_test))

    def add_train_prediction(self, y_hat_train):
        self.y_hat_train = y_hat_train
        
    def add_test_prediction(self, y_hat_test):
        self.y_hat_test = y_hat_test

    def add_metric_summary(self, metric_dict):
        self.metric_dict = metric_dict


    def create_graph(self, bore): # Move to Bore class?
        if self.times_out > 1:
            # real_y_test --> SINGLE LINE
            np.concatenate(self.y_test[:,0],self.y_test[-1,-1])

        # if self.y_hat_test is None:
        #     raise Exception('No prediction for testing period')
        # if self.y_hat_train is None:
        #     raise Exception('No prediction for training period')
        
        self.unscaled_y_hat_train = self.output_scaler.inverse_transform(self.y_hat_train)
        self.unscaled_y_hat_test = self.output_scaler.inverse_transform(self.y_hat_test)
        
        #TITLE 
        title = bore.id + ' - Keras LSTM (Full Set)'
        # Include loss + metrics
        
        plt.figure()
        plt.plot(self.test_dates, self.unscaled_y_hat_test, label='Test Predictions')
        plt.plot(self.test_dates, self.unscaled_y_test, label='Test Actuals')
        plt.plot(self.train_dates, self.unscaled_y_hat_train, label='Training Predictions')
        plt.plot(self.train_dates, self.unscaled_y_train, label='Training Actuals')

        plt.title(title)
        plt.xlabel('Date')
        plt.ylabel('SWL (m)')
        plt.legend()
        plt.tight_layout()
        plt.show()
        
        plt.figure()
        
        title = bore.id + ' - Keras LSTM (Test Set)'
        
        plt.plot(self.test_dates, self.unscaled_y_hat_test, label='Test Predictions')
        plt.plot(self.test_dates, self.unscaled_y_test, label='Test Actuals')
        plt.title(title)
        plt.xlabel('Date')
        plt.ylabel('SWL (m)')
        plt.legend()
        plt.tight_layout()
    
      


